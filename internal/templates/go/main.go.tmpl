// Code generated by api-generator. DO NOT EDIT.
package main

import (
    "context"
    "fmt"
    "log"
    "os/signal"
	"syscall"
	"time"
    "net/http"
    
    {{ if eq .RouterType "chi" }}"github.com/go-chi/chi/v5"{{ end }}
    "{{ .ModuleName }}/routes"
)

func main() {
    {{ if eq .RouterType "chi" }}
    r := chi.NewRouter()
    routes.SetupRoutes(r)

    srv := &http.Server {
        Addr: ":8080",
        Handler: r,
    }
    {{ else }}

    mux := http.NewServeMux()
    routes.SetupRoutes(mux)

    srv := &http.Server {
        Addr: ":8080",
        Handler: mux,
    }

    {{ end }}

    done := make(chan bool, 1)

	go gracefulShutdown(srv, done)

    log.Println("Server started on :8080")

	err := srv.ListenAndServe()
	if err != nil && err != http.ErrServerClosed {
		panic(fmt.Sprintf("http server error: %s", err))
	}


	<-done
	log.Println("Graceful shutdown complete.")
}

func gracefulShutdown(apiServer *http.Server, done chan bool) {
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	{{ "<-" }}ctx.Done()

	log.Println("shutting down gracefully, press Ctrl+C again to force")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := apiServer.Shutdown(ctx); err != nil {
		log.Printf("Server forced to shutdown with error: %v", err)
	}

	log.Println("Server exiting")

	{{ "done <- true" }} 
}

