// Code generated by api-generator. DO NOT EDIT.
package api

import (
    "net/http"
    "encoding/json"
)

{{ range $svcName, $svc := .Services }}
    // {{ $svcName }}Handler - обработчик HTTP-запросов для {{ $svcName }}

    {{ $handlerVar := printf "%sHandler" (ToTitle $svcName) }}
    {{ $serviceVar := printf "%sService" (ToTitle $svcName) }}
    type {{ $handlerVar }} struct {
        Svc {{ $serviceVar }}
    }

    func New{{ $handlerVar }}(svc {{ $serviceVar }}) *{{ $handlerVar }} {
        return &{{ $handlerVar }} {
            Svc: svc,
        }
    }

    {{ range $epName, $ep := $svc.Endpoints }}
        // {{ $epName }} - обработчик {{ $ep.Method }} {{ $ep.Path }}
        func (h *{{ $handlerVar }}) {{ $epName | ToTitle }}(w http.ResponseWriter, r *http.Request) {
            var req {{ $epName | ToTitle }}Request

            {{ if $ep.Request }}
            if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
                http.Error(w, "Invalid JSON", http.StatusBadRequest)
                return
            }
            {{ end }}

            {{ if $ep.Query }}
            // Парсинг query-параметров
            query := r.URL.Query()
            {{ range $param, $type := $ep.Query }}
            if q := query.Get("{{ $param }}"); q != "" {
                req.{{ $param | ToTitle }} = q
            }
            {{ end }}
            {{ end }}

            resp, err := h.Svc.{{ $epName | ToTitle }}(r.Context(), &req)
            if err != nil {
                http.Error(w, err.Error(), http.StatusInternalServerError)
                return
            }

            w.Header().Set("Content-Type", "application/json")
            json.NewEncoder(w).Encode(resp)
        }
    {{ end }}
{{ end }}
